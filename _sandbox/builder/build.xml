<?xml version="1.0" encoding="UTF-8"?>
<project name="lessIsMore" default="build" basedir="..">
	
	<!-- 
		To call predefined configuration files (files inside config directory), define the variable:
		
		prompt$ ant -Dconfig.name=[TEMPLATE_NAME]
		
		Then, the files will be called as:
		
		config/[TEMPLATE_NAME].xml
		
		It will accept "array" of config files that will be executed in order:
		
		prompt$ ant -Dconfig.name=[TEMPLATE_NAME1],[TEMPLATE_NAME2],[TEMPLATE_NAME3]...
		
		config/[TEMPLATE_NAME1].xml
		config/[TEMPLATE_NAME2].xml
		config/[TEMPLATE_NAME3].xml
		(...)
		
		Example:
		prompt$ ant -Dconfig.name=asp-net-mvc,flash
		
		******************
		
		You can load a xml file too using:
		prompt$ ant -Dconfig.file=file-name.xml
		
		******************
		
		Or both:
		prompt$ ant -Dconfig.name=asp-net-mvc,flash -Dconfig.file=file-name.xml
		
		The loading order will always be:
		config/common.xml
		config/[config.name]
		config/[config.file]
 	-->
	<property name="dir.classpath" value="${basedir}/builder" />
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${dir.classpath}/lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<import file="${dir.classpath}/config/common.xml" />

	<!-- load config file (based on name) -->
	<for list="${config.name}" param="curr.config.name">
		<sequential>
			<property name="config.@{curr.config.name}" value="${dir.classpath}/config/@{curr.config.name}.xml" />
			<available property="has.config.@{curr.config.name}" file="${config.@{curr.config.name}}" />
			<if>
				<equals arg1="${has.config.@{curr.config.name}}" arg2="true" />
				<then>
					<echo>[build.xml] Import config file: "${config.@{curr.config.name}}"</echo>
					<import file="${config.@{curr.config.name}}" />
				</then>
				<else>
					<echo>[build.xml] Config file not found: "${config.@{curr.config.name}}".</echo>
					<echo>            Remember config.name must be the name of a file inside ${basedir}/builder/config/ without the extension.</echo>
				</else>
			</if>
		</sequential>
	</for>
	<!-- load custom config file (based on file path) -->
	<for list="${file.custom-config}" param="curr.custom-config">
		<sequential>
			<propertyregex property="config.@{curr.custom-config}" input="@{curr.custom-config}" regexp="~/" replace="${basedir}/" override="true" />
			<available property="has.config.@{curr.custom-config}" file="${config.@{curr.custom-config}}" />
			<if>
				<equals arg1="${has.config.@{curr.custom-config}}" arg2="true" />
				<then>
					<echo>[build.xml] Import custom config file: "${config.@{curr.custom-config}}"</echo> 
					<import file="${config.@{curr.custom-config}}" />
				</then>
				<else>
					<echo>[build.xml] Custom config file not found: "${config.@{curr.custom-config}}".</echo> 
					<echo>            Remember config.file must be a absolute path file or you can use "~/" to place the root folder.</echo>
				</else>
			</if>
		</sequential>
	</for>
	
	<!-- get html templates -->
	<echo>Get templates from HTML files (index.html and head.html)</echo>
	<loadfile property="r.html.template">
		<file file="${dir.html}/index.html" />
	</loadfile>
	<loadfile property="r.html-head.template">
		<file file="${dir.html}/head.html" />
	</loadfile>
	
	<!-- load modules config files -->
	<for list="${mod.server-list}" param="module">
		<sequential>
			<available file="${dir.server}/@{module}/${file.property-name}" type="file" property="file-@{module}" />
			<if>
				<equals arg1="${file-@{module}}" arg2="true" />
				<then>
					<echo>Loading module properties: ${dir.server}/@{module}/${file.property-name}</echo>
					
					<var name="str.curr-module" value="@{module}" />
					<var name="file.curr-mod-config" value="${dir.server}/@{module}/${file.property-name}" />
					
					<script language="javascript" manager="bsf">
						<classpath> 
							<fileset dir="${dir.classpath}/lib" includes="*.jar" /> 
						</classpath>
						<![CDATA[ 
						importClass(java.io.File);
						
						var loadTask = project.createTask("loadfile"),
							fileToLoad = project.createTask("file"),
							currentModule = project.getProperty("str.curr-module"),
							currentFile = project.getProperty("file.curr-mod-config"),
							currentContentName = "str.config-content-"+currentModule,
							currentContent = null,
							propMatches = [],
							currentList = project.getProperty("str.replace-list").split(","),
							propIndex = -1,
							indexOf = function(p_array, p_obj, p_start){
								for (var i = (p_start || 0); i < p_array.length; i++) {
									if (p_array[i] == p_obj) { return i; }
								}
								return -1;
							};
					    
						loadTask.setProperty(currentContentName);
						loadTask.setSrcFile(new File(currentFile));
						loadTask.perform();
						
						currentContent = project.getProperty(currentContentName);
						
						propMatches = currentContent.match(/(?:property|var)\s+name="(?!tmp)(.*?)"/g) || [];
						
						for(var i=0, len = propMatches.length; i<len; i++){
							propMatches[i] = propMatches[i].replace(/(?:property|var)\s+name="(r\..*?)"/, '$1');
						}
						
						for(var i=0, len=currentList.length; i < len; i++){
							propIndex = indexOf(propMatches, currentList[i]);
							if(propIndex >= 0){
								propMatches.splice(propIndex, 1);
							}
						}
						
						// workaround creating a lot of unique properties and concat all using antcollab
						project.setProperty("prop."+currentContentName, propMatches.join(','));
						]]>
					</script>
					<var name="str.replace-list" value="${str.replace-list},${prop.str.config-content-@{module}}" />
					
					<import file="${file.curr-mod-config}"/>
				</then>
			</if>
		</sequential>
	</for>
	
	<!-- remove directory if it already exists -->
	<target name="clean" description="guarantee that destination directory does not exists">
		<delete dir="${dir.destination}" />
	</target>
	<!-- create directory -->
	<target name="create-base" depends="clean" description="create destination directory">
		<mkdir dir="${dir.destination}" />
	</target>
	
	<!-- copy all base directories -->
	<target name="base-copy-directories" description="copy directories to destination (core)" >
		<echo>Copy modules listed on "mod.server-list" to "${dir.destination}"</echo>
		
		<!-- copy modules folders -->
		<for list="${mod.server-list}" param="module">
			<sequential>
				<echo>&gt;&gt; copying module: "@{module}"</echo>
				<copy todir="${dir.destination}" overwrite="true">
					<fileset dir="${dir.server}/@{module}/" excludes="${file.property-name}"/>
				</copy>
			</sequential>
		</for>

		
		<if> <!-- copy css folder -->
			<equals arg1="${config.no-css}" arg2="" />
			<then>
				<copy todir="${dir.assets}/css" overwrite="true">
					<fileset dir="${dir.css}/" includes="${mod.css-list}" />
				</copy>
			</then>
		</if>
		
		<if> <!-- copy js folder -->
			<equals arg1="${config.no-js}" arg2="" />
			<then>
				<copy todir="${dir.script-assets}/js" overwrite="true">
					<fileset dir="${dir.js}/" includes="${mod.js-list}" />
				</copy>
			</then>
		</if>
	</target>
	
	<!-- replace texts based on str.replace-list -->
	<target name="base-replace-texts" description="replaces texts based on the str.replace-list array">
		<echo>Replace HTML wildcards based on "str.replace-list"</echo>
		
		<for list="${str.replace-list}" param="item">
			<sequential>
				<propertyregex property="curr-item" override="yes" input="@{item}" regexp="(?:^\s+|)(.*?)(?:\s+$|)" replace="\1"/>
				<propertyregex property="curr-wildcard" override="yes" input="${curr-item}" regexp="^r\." replace=""/>
				<var name="curr-item-cp" value="" />
				<propertycopy override="yes" name="curr-item-cp" from="${curr-item}" silent="true" />
				<if>
					<equals arg1="${curr-item-cp}" arg2="" />
					<else>
						<echo>  Replacing item: "${curr-wildcard}"</echo>
						<replace dir="${dir.destination}/" token="@${curr-wildcard}@" value="${curr-item-cp}" />
					</else>
				</if>
			</sequential>
		</for>
	</target>
	
	<!-- exclude all unused wildcards -->
	<target name="post.replace-texts" description="erase all unused wildcards">
		<replaceregexp match="@[\w-\.]+?@" replace="" byline="yes" flags="g" >
			<fileset dir="${dir.destination}" />
		</replaceregexp>
		<replaceregexp match="([\r\n]\t\t[\r\n])" replace="" flags="g" >
			<fileset dir="${dir.destination}" includes="*.aspx,**/*.aspx" />
		</replaceregexp>
	</target>
	
	<!-- for extension -->
	<target name="copy-directories" description="copy directories to destination" />
	<target name="get-templates" description="get templates to be used as wildcards" />
	<target name="replace-texts" description="replaces wildcards for final values" />
	
	<!-- constructor -->
	<target name="build" depends="
		create-base,
		base-copy-directories,
		copy-directories,
		get-templates,
		base-replace-texts,
		replace-texts,
		post.replace-texts
	">
		<echo>[build.xml] Build complete at ${dir.destination}</echo>
	</target>
	
</project>



