#summary Instruções básicas para qualquer projeto LIM

= Introdução =

A idéia básica deste framework é servir de base de desenvolvimento para projetos web. O foco principal é na programação Client Side mas com algumas pitadas de funções úteis Server Side.

Inicialmente ele está pronto, testado e funcionando para ASP .NET C# mas pode (e deve) ser reescrito para outras linguagens.

As principais motivações para a criação deste framework são:

   # garantiar a melhor experiência de navegação para o usuário;
   # consistência do códico;
   # facilidade na manutenção;
   # manter uma padronização com as melhores técnicas comprovadas.

-----------------------------------------------------------------------------------------

= Práticas Gerais = 

== Encoding do arquivo ==

Todo os arquivos da LIM estão e DEVEM ser salvos como *UTF-8*, portanto, configure corretamete o seu editor!

== Identação ==

Não importa qual a linguagem em que se esteja desenvolvendo uma correta indentação é obrigatória para o entendimento do código. Os editores devem estar configurados para que cada *TAB corresponda a 4 espaços*. Importante: Para a identação do código, não se deve usar espaços. Uma página HTML pode ficar até 40% mais pesada só por conta desses espaços.

=== Identação HTML ===
TODO

=== Identação JS ===

Como convenção seguir o estilo de indentação 1TBS ([http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS The One True Brace Style]):

Principais princípios:

    * As instruções de código deve estar em linhas separadas;
    * Abrir { a cada if, else, while, function, etc, mesmo que estes só tenham uma linha de instrução;
    * O { deve ficar na mesma linha do início do comando. Ex.: {{{function teste() { }}}
    * Todos os fins de instrução devem terminar com ;


Em adição ao estilo 1TBS adotar também:

    * Utilização de strings com *aspas simples* ' para o código JS e *aspas duplas " para o código HTML*;
    * Para parâmetros de uma função, iniciar com o prefixo {{{p_}}};


=== Identação CSS ===
TODO

== Legibilidade e compreensão vs. peso dos arquivos ==

Nós preferimos a legibilidade e compreensão em detrimento da economia de tamanho dos arquivos. Iremos utilizar processos do lado do servidor que irão comprimir automaticamente (GZip) todos os arquivos estáticos do lado do cliente, tais como CSS e Javascript.

Não há nenhuma necessidade de comprimir HTML, CSS ou Javascript _na mão_.

Recomendamos ainda o uso de comentários no HTML, CSS e JS. Os comentários HTML devem sempre ser feitos como comentário da linguagem nativa.

Errado: {{{<!-- Comentário -->}}}

Correto (.NET C#): {{{<%// Comentário%>}}}

== HTML ==

Todo o código HTML deve ser testado e estar 100% [http://validator.w3.org/ válido segundo os padrões W3C]. Tão importante quanto a validação do código é garantir a compatibilidade _Cross-Browser_.

Mesmo sabendo dos bugs e problemas do IE6, ele ainda é o navegador padrão de uma parcela significativa dos usuários brasileiros e nosso principal público (dados de maio de 2010). Dito isso é necessário se certificar de que TODAS as partes do site funcionam da mesma forma para os seguintes navegadores:

    * IE6, IE7 e IE8;
    * Firefox 3.5 +;
    * Safari (última versão estável, nada de _beta_);
    * Google Chrome (última versão estável, nada de _beta_);


Garantindo essa compatibilidade é bem provável que ele tenha um ótimo desempenho no Opera e outros.

=== Doctype ===

Como padrão deve-se utilizar XHTML 1.0 Strict.

{{{<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">}}}